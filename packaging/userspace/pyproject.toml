[tool.poetry.dependencies]
python = '^3.6'
setuptools = { version = '>= 20.7' }
distro = { version = '>= 0.6', python = '^3.8' }
lief = { version = '>= 0.10', optional = true }

[tool.pylint]
	[tool.pylint.MASTER]
	jobs = 1
	load-plugins = [
		'pylint.extensions.bad_builtin',
		'pylint.extensions.broad_try_clause',
		'pylint.extensions.check_elif',
		'pylint.extensions.empty_comment',
		'pylint.extensions.mccabe',
		'pylint.extensions.overlapping_exceptions',
		'pylint.extensions.redefined_variable_type',
		# confusing_elif and typing not added until 2.8, codacy uses 2.7.4
		#'pylint.extensions.confusing_elif',
		#'pylint.extensions.typing',
		# site packages
		#'pylint_enums',
		#'pylintfileheader',
		#'sentry_stack_checker',
	]
	suggestion-mode = 'yes'

	[tool.pylint.'MESSAGES CONTROL']
	confidence = ''
	enable = [
		'all',
		'parameter-unpacking',
		'unpacking-in-except',
		'old-raise-syntax',
		'backtick',
		'long-suffix',
		'old-ne-operator',
		'old-octal-literal',
		'import-star-module-level',
		'non-ascii-bytes-literal',
		'raw-checker-failed',
		'bad-inline-option',
		'file-ignored',
		'deprecated-pragma',
		'apply-builtin',
		'basestring-builtin',
		'buffer-builtin',
		'cmp-builtin',
		'coerce-builtin',
		'execfile-builtin',
		'file-builtin',
		'long-builtin',
		'raw_input-builtin',
		'reduce-builtin',
		'standarderror-builtin',
		'unicode-builtin',
		'xrange-builtin',
		'coerce-method',
		'delslice-method',
		'getslice-method',
		'setslice-method',
		'old-division',
		'dict-iter-method',
		'dict-view-method',
		'next-method-called',
		'metaclass-assignment',
		'indexing-exception',
		'raising-string',
		'reload-builtin',
		'oct-method',
		'hex-method',
		'nonzero-method',
		'cmp-method',
		'input-builtin',
		'round-builtin',
		'intern-builtin',
		'unichr-builtin',
		'map-builtin-not-iterating',
		'zip-builtin-not-iterating',
		'range-builtin-not-iterating',
		'filter-builtin-not-iterating',
		'using-cmp-argument',
		'eq-without-hash',
		'div-method',
		'idiv-method',
		'rdiv-method',
		'exception-message-attribute',
		'invalid-str-codec',
		'sys-max-int',
		'bad-python3-import',
		'deprecated-string-function',
		'deprecated-str-translate-call',
		'deprecated-itertools-function',
		'deprecated-types-field',
		'next-method-defined',
		'deprecated-operator-function',
		'deprecated-urllib-function',
		'xreadlines-attribute',
		'deprecated-sys-function',
		'exception-escape',
		'comprehension-escape',
	]
	disable = [
		'mixed-indentation',
		'wrong-import-position',
		'bad-continuation',
		'bad-indentation',
		'missing-docstring',
		'missing-module-docstring',
		'missing-class-docstring',
		'missing-function-docstring',
		'use-symbolic-message-instead',
		'suppressed-message',
		'useless-suppression',
		'locally-disabled',
		'no-absolute-import',
		'import-outside-toplevel',
		'wrong-import-order',
		'dict-items-not-iterating',
		'dict-keys-not-iterating',
		'dict-values-not-iterating',
		# pyflakes gets these for us
		'unused-import',
		'function-redefined',
		# leave these uncommented for codacy, but toggle them as needed
		'no-else-return',
		'no-else-raise',
		'no-else-continue',
		'duplicate-code',
	]

	[tool.pylint.REFACTORING]
	max-nested-blocks = 10
	never-returning-functions = [ 'sys.exit' ]

	[tool.pylint.LOGGING]
	logging-format-style = 'old'
	logging-modules = [ 'logging', 'log_instrumentation' ]

	[tool.pylint.VARIABLES]
	allow-global-unused-variables = 'yes'
	allowed-redefined-builtins = []
	init-import = 'no'
	redefining-builtins-modules = [
		'six.moves',
		'past.builtins',
		'future.builtins',
		'builtins',
		'io',
	]

	[tool.pylint.BASIC]
	argument-naming-style = 'snake_case'
	attr-naming-style = 'snake_case'
	bad-names = []
	bad-names-rgxs = []
	class-attribute-naming-style = 'any'
	class-const-naming-style = 'UPPER_CASE'
	class-naming-style = 'PascalCase'
	const-naming-style = 'UPPER_CASE'
	function-naming-style = 'snake_case'
	good-names = [
		'i',
		'j',
		'k',
		'l',
		'ex',
		'_',
		'fn',
		'sz',
		'pp',
	]
	include-naming-hint = 'yes'
	inlinevar-naming-style = 'any'
	method-naming-style = 'snake_case'
	module-naming-style = 'snake_case'
	property-classes = [ 'abc.abstractproperty' ]
	variable-naming-style = 'snake_case'

	[tool.pylint.TYPECHECK]
	contextmanager-decorators = [ 'contextlib.contextmanager' ]
	generated-members = []
	ignore-none = 'yes'
	ignore-on-opaque-inference = 'yes'
	ignored-classes = []
	ignored-modules = []
	missing-member-hint = 'yes'

	[tool.pylint.FORMAT]
	expected-line-ending-format = ''
	indent-string = '\t'
	max-line-length = 120  # Give pylint a larger margin so codacy doesn't flag
	max-module-lines = 3000
	single-line-class-stmt = 'no'
	single-line-if-stmt = 'no'

	[tool.pylint.STRING]
	check-quote-consistency = 'yes'
	check-str-concat-over-line-jumps = 'no'

	[tool.pylint.MISCELLANEOUS]
	notes = [
		'FIXME',
		'TODO',
		'HACK',
		'KLUDGE',
		'BUG',
		'OPTIMIZE',
		'XXX',
		'JANK',
		'AWFUL',
		'BAD',
		'CRIME',
		'CRIMES',
	]

	[tool.pylint.DESIGN]
	max-args = 20
	max-attributes = 100
	max-bool-expr = 4
	max-branches = 100
	max-locals = 5000
	max-parents = 100
	max-public-methods = 100
	max-returns = 100
	max-statements = 5000
	min-public-methods = 0
	max-complexity = 20

	[tool.pylint.TYPING]
	py-version = '3.6'
	runtime-typing = 'yes'

	[tool.pylint.PYLINTFILEHEADER]
	file-header = '#!/usr/bin/env python3?\n# -\*- coding: utf-8 -\*-'

	[tool.pylint.SENTRY-STACK-CHECKER]
	report-loggers = [
		'debug',
		'info',
		'warning',
		'error',
		'critical',
		'trace',
		'message',
	]

	[tool.pylint.CLASSES]
	check-protected-access-in-special-methods = 'yes'
	defining-attr-methods = [
		'__init__',
		'__new__',
		'__enter__',
		'__post_init__',
		'__set_name__',
		'__init_subclass__',
	]
	exclude-protected = []
	valid-classmethod-first-arg = [ 'cls', 'mcls', 'scls' ]
	valid-metaclass-classmethod-first-arg = [ 'cls', 'mcls', 'scls' ]

	[tool.pylint.IMPORTS]
	allow-wildcard-with-all = 'no'
	analyse-fallback-blocks = 'no'
	deprecated-modules = [ 'optparse', 'tkinter.tix' ]
	known-standard-library = ''
	known-third-party = ''
	preferred-modules = []

	[tool.pylint.BROAD_TRY_CLAUSE]
	max-try-statements = 5

[tool.pydocstyle]
ignore = [
	# D100: Missing docstring in public module
	'D100',
	# D101: Missing docstring in public class
	'D101',
	# D102: Missing docstring in public method
	'D102',
	# D103: Missing docstring in public function
	'D103',
	# D104: Missing docstring in public package
	'D104',
	# D105: Missing docstring in magic method
	'D105',
	# D106: Missing docstring in public nested class
	'D106',
	# D107: Missing docstring in __init__
	'D107',
]

[tool.flakehell]
min-python-version = '3.6.0'
mypy-init-return = true
max_line_length = 100
show_source = false
#format = 'colored'
format = 'grouped'
application-package-names = [ 'irods' ]
import-order-style = 'pycharm'
application-import-names = [
	'compat_shims',
	'context',
	'elfinfo_utils',
	'libdirectives',
	'lief_instrumentation',
	'log_instrumentation',
	'options',
	'runpath_util',
	'script_common',
	'strip_util',
	'tar_util',
	'utilbase',
]

[tool.flakehell.plugins]
pylint = [ '+*' ]
pyflakes = [ '+*' ]
pycodestyle = [
	'+*',
	# E101: indentation contains mixed spaces and tabs
	# Tabs for indentation, spaces for alignment.
	'-E101',
	# E128: continuation line under-indented for visual indent
	# Don't hate me cuz I'm pretty.
	'-E128',
	# E4??: import stuff
	# We are managing imports with a different plugin
	'-E4??',
	# W191: indentation includes tabs
	# Yes. It does.
	'-W191',
]
'flake8-*' = [ '+*' ]
hacking-core = [
	'+*',
	# H101: Use TODO(NAME)
	# pylint handles TODO. git handles authorship
	'-H101:',
	# H106: Don't put vim configuration in source files
	'-H106:',
	# H238: old style class declaration, use new style (inherit from `object`) [hac
	# Do not require explicit inheritance from object
	'-H238:',
	# H3??: import stuff
	# We are managing imports with a different plugin
	'-H3??:',
	# H903:  Windows style line endings not allowed in code
	# git can mess with this
	'-H903:',
]
flake8-annotations = [
	'+*',
	# ANN101: Missing type annotation for self in method
	'-ANN101',
	# ANN102: Missing type annotation for cls in classmethod
	'-ANN102',
]
flake8-docstrings = [
	'+*',
	# D1??: Missing docstring
	'-D1??',
]
flake8-executable = [
	'+*',
	# EXE001: Shebang is present but the file is not executable
	'-EXE001',
]
flake8-multiline-containers = [
	'+*',
	# JS102: Multi-line container does not close on same column as opening
	'-JS102',
]
flake8-simplify = [
	'+*',
	# SIM106: Handle error-cases first
	'-SIM106',
]
flake8-typing-imports = [
	'+*',
	# TYP002: @overload is broken in <3.5.2, add `if sys.version_info < (3, 5, 2): def overload(f): return f`
	'-TYP002',
]
flake8-black = [ '-*' ]
flake8-commas = [ '-*' ]
flake8-fixme = [ '-*' ]
flake8-isort = [ '-*' ]

[tool.flakehell.exceptions."log_instrumentation.py"]
pycodestyle = [ '-E221' ]  # multiple spaces before operator

[tool.flakehell.exceptions."compat_shims.py"]
pycodestyle = [ '-E301' ]  # expected x blank lines, found y
